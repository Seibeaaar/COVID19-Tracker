{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","URL","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","Chart","countryName","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","CountryPicker","countryPicker","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","state","handleCountryChange","fetchedData","setState","this","Object","keys","type","height","width","loader","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a8f127b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2KVvN\",\"card\":\"Cards_card__2snFH\",\"infected\":\"Cards_infected__1mkp7\",\"recovered\":\"Cards_recovered__3Sdn7\",\"deaths\":\"Cards_deaths__R7PIC\"};","import React from 'react';\r\nimport {Card, Typography, CardContent, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst URL = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = URL;\r\n  if(country) {\r\n    changeableUrl = `${URL}/countries/${country}`;\r\n  }\r\n  try {\r\n    const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n    return {confirmed, recovered, deaths, lastUpdate};\r\n  } catch(e) {\r\n\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try{\r\n    const { data } = await axios.get(URL + '/daily');\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate\r\n    }))\r\n    return modifiedData;\r\n  } catch(e) {\r\n\r\n  }\r\n}\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(URL + '/countries');\r\n    return countries.map(country => country.name);\r\n  } catch(e) {\r\n\r\n  }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data : { confirmed, recovered, deaths }, countryName }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = (\r\n    dailyData.length ? <Line data={{labels: dailyData.map(({date}) => date), datasets: [{\r\n      data: dailyData.map(({confirmed}) => confirmed),\r\n      label: 'Infected',\r\n      borderColor: '#3333ff',\r\n      fill: true\r\n    }, {\r\n      data: dailyData.map(({deaths}) => deaths),\r\n      label: 'Deaths',\r\n      borderColor: 'red',\r\n      backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n      fill: true\r\n    }]}} /> : null\r\n  );\r\n\r\n  const barChart = confirmed ? (<Bar data={{\r\n    labels: ['Infected', 'Recovered', 'Deaths'],\r\n    datasets: [\r\n      {\r\n        label: 'People',\r\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n        data: [confirmed.value, recovered.value, deaths.value]\r\n      }\r\n    ]\r\n  }}\r\n  options={{\r\n    legend: {display: false},\r\n    text: `Current state in ${countryName}`\r\n  }}/>) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {countryName ? barChart : lineChart}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\nimport {countries} from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ countryPicker }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setFetchedCountries(await countries());\r\n    }\r\n\r\n    fetchCountries();\r\n  }, [setFetchedCountries])\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={e => countryPicker(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, index) => <option value={country} key={index} >{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default CountryPicker;","import React, {Component} from 'react';\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport {fetchData} from './api';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: {},\r\n    country: ''\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({\r\n      data: fetchedData\r\n    })\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({\r\n      data: fetchedData,\r\n      country\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return Object.keys(data).length ? (\r\n      <div className={styles.container}>\r\n        <Cards data={this.state.data}/>\r\n        <CountryPicker countryPicker={this.handleCountryChange}/>\r\n        <Chart data={this.state.data} countryName={this.state.country}/>\r\n      </div>\r\n    ) : (<Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} className={styles.loader}/>)\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16tJs\",\"loader\":\"App_loader__2XkrJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2qXac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2-ove\"};"],"sourceRoot":""}